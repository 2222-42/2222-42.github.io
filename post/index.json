[
    
        
            {
                "ref": "https://2222-42.github.io/2020/11/10/20201110log/",
                "title": "20201110log",
                "section": "post",
                "date" : "2020.11.10",
                "body": "Samuel Becketの詩を思い出し、開発のために、上手な失敗を素早く失敗するためにどうするか、ということを考える。\nRustの勉強記録は、5.1節から5.3節にかけての、構造体に関して、その所有権とその実装例とそのメソッドについて。\ndiary better fail Samuel Becketの詩の１つのうちに ever tried, ever failed, no matter, try again, fail again, fail better というフレーズがあると覚えている。\nこれはコーディングやプロジェクトにおいても当てはまると思っている。それは、プロダクトから、チーム、個人、そして一定時間、問わない。\nプロジェクトにおいては、この期間でこれだけをやって、リリースして反応を見て、うまくいかなかったら(たいていうまくいかないし何か問題があるので)、その問題を分析して、原因を特定して、また次にトライして、と繰り返す。\nチームのコーディングにおいては、コードを書いてPR出して、レビューをもらって、ダメだったらそれを改善して、またRe-request Reviewして、と繰り返す。\nさらに、もっと短い時間で、一時間でこれだけやろうとして、けれどできなかったとなったら、自分の技術的に分からないところがあるのか、それとも、要件や成すべきことを把握していないか、それとも、想定よりも難しいことが存在していたことがわかる。そこから、また、それらのことを解決したり分割したりして、また予測して、やってみて、と繰り返す。\n挑戦して、失敗して、けれど失敗自体に問題はなくて、また挑戦して、失敗して、うまく失敗する。\n失敗は一つの選択肢である、というのはよく言った言葉である。 開発においての失敗というのは大凡何らかのコミュニケーション不足や伝達不足(ユーザーとプロダクトの間、チーム間、自己認識いずれにおいても)があることが原因であり、それに早く気づき、それを早く解消し、早く形にするためには失敗に気づき、次にまたコミュニケーションをすることが開発の成功に繋がることである。\nfriend 会いたい人と会う予定を立てることがとても楽しい。\nけれど、会いたい人が私と本当にこの予定を喜んでいるのか、不安になってしまうこともある。 しかし、それもまたこそばゆい喜びを産んでくれる。\n今はとても幸せであり、こういう友を得られたことはとても良い。 (これを喪失したときは、またとても悲しみを産むのであろう。)\n今日の勉強 rust pp. 93 -100\n5.1節\n 構造体データの所有権  フィールドの方は所有権のあるものを使う  例えば、所有権のあるStringを使い、\u0026amp;strは使わない 理由:  全データをそのインスタンスに所有してもらう必要があるから 構造体全体が有効な間はずっと有効である必要がある  他の何かに所有されているデータへの参照を保持させるにはライフタイムを使う    5.2節\n 単一の変数を使った実装から、タプルを使った実装へ、構造体を使った実装へとリファクタリングをしていく  単一の変数だと、引数に関連性があるのにそれを表現されないという問題がある  可読性と扱いやすさの問題がある 変数をグループ化する  タプルで実装すると、要素に名前がないので、計算が不明瞭になるという問題がある  データの意味をコードに載せたい  ラベル付けするのに構造体を使う  関数に渡すのは借用を用いる(\u0026amp;を用いる)  理由は、main関数で所有権を保つため   構造体を使う際に、デバッグ中にインスタンスを出力しフィールの値を確保したい場合  構造体なので、整形する方法が自明ではない、  {}の代わりに、{?}かpretty-printな{:?}を使う。  Debugを呼ばれる出力を使いたいと指示する  この機能を構造体で使うようにするのに、derive注釈をして、明示的に選択をしなければならない  (なお、これら一連のやるべきことはcompilerのError messageから何をやるべきかわかる)      5.3節\n メソッド記法  構造体と関数をより緊密に結びつける  他のどんな型でもうまく動作しなくする  メソッドについて  構造体(もしくはenumかTrait Object)の文脈で定義される 最初の引数は必ずself  selfはメソッドが呼び出されている構造体インスタンスを表す     メソッドの書き方は以下の通り:\nimpl 構造体名 { fn 関数名(self (もしくは \u0026amp;self)) { ... self.xxx ... } }   メソッドの使い方  インスタンス.関数名() メソッドの引数は、関数と同じで、所有権を奪えたり、不変借用したり、可変借用したりできる  メソッドの利点:  selfの型を繰り返し書く必要がなくなる 体系化できる  ライブラリ内の各所を探させるのではなく、 この方のインスタンスでできることを1つのimplにまとめられる。   "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/09/20201109log/",
                "title": "20201109log",
                "section": "post",
                "date" : "2020.11.09",
                "body": "コミュニケーション苦手ととらえ始めた時期があったことと、その原因と、どうしてコミュニケーションがある程度できるようになったかの項目のピックアップ。 あと、OGP設定の話とか、Clean Architeture を意識して作ったMockのレポジトリの話とか。\n今日の勉強は、Rustのスライスの話と構造体の話、Isabelleでの定数畳み込みと定数伝播、そして、Teamのハイレベルの同期の話。\ndiary communication コミュニケーションが下手だと自己診断するようになったのは、コミュニケーションでの失敗の痛みを重く受け止めすぎていたことがある。 それは、オフライン上でのコミュニケーションも、オンライン上でのコミュニケーション、いずれであっても。 (今でも、自分のコミュニケーションにおけるコミットメントは重く捉えてしまっている。というのも、相手が自分の発言を重く捉えている可能性もあるからだ。(相手の人生ではなく、その場のコミュニケーションや自分の役割や責務という範囲で絞ったコミットメントにしようと最近心掛けていることに気づいた。))\nなんで人に自分の気持ちが伝わらないのかと悲観的になっていた。 (うまいところは逃げるという選択をいつでも用意していたことである。そして、その問題を他人に伝え、新たな手法を模索していたことである。)\n振り返れば、自分が若すぎたということや、自分と他人との境界線に気づけていなかったことなどの問題が考えられる。\n今となっては、そのコミュニケーションが不得意であることを認識し、それを改善する機会がいくつかあったことがたくさんあったのだ。\n 父親から、口角を上げなさい、と教えられた  口角は上げられるようになったので、それだけで相手への印象は変わった  目は笑っていないのだが 父親も目が常に笑っていない   学部生の時、どうやったら相手に明確な文章を伝えられるか、自分で分かっていないところを明確にしなければならないこと学んだこと  指導教官の大辻さんは、わからないことをわかならいと明確に言い、私の中で不明瞭な点を明確に示してくれたこと 東大の鈴木さんは、ずばずば私の不十分なところを指摘してきていた。彼は天才だったので、本当に尊敬している。  この二人はあまりに言葉が鋭すぎて、私はついていけなかった感じがある。   修士課程での指導教官の振舞いから、間違えたことにはすぐ訂正し、謝る  指導教官の1人であるところの中戸川教授は、間違えたことに気づいたらすぐに「ごめんなさい、今のは嘘です」と発言していた。  これは素早く失敗し、それからフィードバックループを回すという生産的な行動である その一方で、間違いは恥ではないことに気づいたこと さらに、ただ一つの真理に至るためには、一時の失敗など大したことがないこと   相手に尊敬の念を払えるようになったことが大きなメリットを人間関係で産むこと  潤滑油としてすごく機能する  それがうまくできなくて失敗しているところをさんざん見てきた  自分が知らないことを尋ねることは相手への尊敬がないと相手から引き出せない  特に、煙草ショップの山岸さんから、パイプやタバコについて色々話を聞くことができていたのは、そこに自然と、無意識に、尊敬の念が含められていたことであろう。   大人になるということについて意識を向けさせてもらったこと  修士時代の同僚(その人は30代で一度労働されていた方)から、どういう人になりたいかを考えた方が、採用試験で評価されるよ、と言われた  一方で、指導教官の1人である千葉先生には、まだ20代前半でそれは分かるようなものではないから、意識して生きていけばいいよと提案された  会社の同僚(こちらは40代ですごい環境を生き延びてきた方)から、いいかげん大人になりましょうと言われたこと  大人になるとはどういうことか、と聞いたら、約束をしたらそれを守る、破るときは謝ること  聖書がキリストについて教えてくれたこと  キリストもできないことはできないとして逃げたこと キリストは自分が何者であるかを明確に語ったこと    今、こうして見ると、変化するためのポイントはあったことがわかる。 が、これ以上のドラマ、連続した変化があったはずである。(BARに行くようになって、バーテンの上手な) それが何かわからないが、意識的に行動が変わったところとか、コミュニケーションが徐々にうまくなっていったところはあるのだろう。\nOGP OGPとTwitter Cardの設定を土曜日に実施していた。 内容とかは全く表示できていないし、画像も表示できていないが、とりあえず初期設定は完了した。\n公式に書いてあることをそのまま設定しただけなので、何もしていない感がある。\nclean architecture UserMockGoという、ログインや二段階認証を含むGoのRepositoryを会社の勉強会で作った。\n本当にMockだけなのだが、Clean Architectureというか、責務回りを意識した実装を行った。\nクリーンアーキテクチャのみならず、他の諸々の使用しているツールの知識に関して学ぶことができたので、勉強になった。\n今日の勉強 rust pp.85-93\n4章\n 文字列はバイナリに埋め込まれる  文字列リテラルはスライス  型が\u0026amp;strとなっている 不変な参照えある バイナリのその特定の位置を指すスライスである   引数の型にStringではなく\u0026amp;strを使うようにするメリット  String値と\u0026amp;str値の両方を取れる  つまり、Stringのスライスも 文字列リテラルのスライスも、文字列リテラルも取れる   i32の配列から、配列の一部を参照したい場合に、そのスライスを作ることもできる 所有権、借用、スライス  コンパイル時に、Rustプログラムにおいて、メモリの安全性を保証してくれる 所有権がスコープを抜けたときに、データの所有者に自動的にデータを片づけてくれる   5章(構造体)\n struct(構造体)  自分のプログラム領域で新しい型を作れる  コンパイル時の型精査機をフル活用できるようになる  独自のデータ型  意味のあるグループを形成する複数の関連した値をまとめる 名前付ける  メソッドや関連関数がある 構造体に紐づく振る舞いを指定できる   タプルと構造体の違い:\n   データ 中身の一部を異なる型に データ片に名付け     タプル できる できない   構造体 できる できる    構造体の書き方の基本:\nstrcut 構造体名 { データ片の名前　型 データ片の名前　型 }   構造体名  グループ化されるデータ片の意義を表すものであること  波かっこ内のものをまとめてフィールドと呼ぶ データ片の名前のことをフィールド名と呼ぶ\n structを使いたい時\n インスタンスを生成する  インスタンスは、各フィールドに対して具体的な値を指定する必要がある   構造体から特定の値を取りたい時\n ドット記法で  フィールドの一部を変更したい\n インスタンス全体を可変にしておく必要がある ドット記法使って代入すればいい  式とどうように構造体の新規インスタンスを関数本体の最後の式として生成して、そのインスタンスを返すことを暗示できる\n フィールド名と変数を繰り返すということでできるが、略記法がある フィールド初期化省略記法  仮引数と構造体のフィールド名が一致している場合、 フィールド名を抜きに、仮引数名だけ書けばよい  構造体更新記法  ..instance_nameという記法で、 明示的にセットされていない残りのフィールドが、与えられたインスタンスのフィールドと同じ値となるよう指定できる   タプル構造体\n 構造体名はある  フィールドの型が同じであっても、構造体名が違えば、独自の型となる  フィールドに紐づけられた名前なし 型だけ タプルに似た構造体  ユニット構造体\n フィールドのない構造体 ある方にトレイトを実装するけれども、型事態に保持させるデータは一切ない場面で有効   isabelle Concrete Semantics\n pp.154-156 予備知識:定数畳み込みと定数伝播の話  コンパイラでよく使われる最適化技法 定数畳み込み  コンパイル時に定数式の値を計算し、  定数式には、リテラルと値が変更されない変数の両方が含まれる  計算の値を代入する、 これによって、単純化する  bool値で効率的である   定数伝播  コンパイル時に、変数が既知の定数値を持っているかを定め、 定数値をその変数のuse-occurrencesに伝播させる  Live Analysisで、使用していない変数、生きていない変数と結論付け、パフォーマンスをよくするために消すということも行われる  Constant Folding(定数畳み込み)をtrickyに使う言語が多い  だからこそ、correctnessの証明が求められる  各種問題  浮動小数点の畳み込みはマシーンのrounding modeに依存するという問題がある ゼロで割ったり、overflowしたときの対処がだいぶ異なる  runtime時にraiseする そのようなprogramはcompilerに許させない 任意コードを実行できるようにcompilerに許す   各種問題に対応するためにテストを素朴にすることの問題点  ハードウェアが正しいという仮定の下で、 incorrect hardwareからcorrectであることを区別しようとするのはよくないmoveである。  やること:\n 実際の動き 形式化 証明  Foldingとして、まずはarithmetic expressionsを見る\n 算術の表現をとって、 そのうちにあるconstant subexpressionsを全て静的に評価する  Foldingとpropagationをmixして行う\n そのためには、テーブルか環境が必要  どの変数が定数値を持っているか その値は何か   afold(:: aexp =\u0026gt; tab =\u0026gt; aexp)の定義(cf: Theory Fold)\n このsimple optimizationの正しさの基準\n optimizationを伴う実行結果が、それなしのものと等しいこと、  つまり、aval (afold a t) s = aval a s  追加の仮定が必要  静的テーブルtが、runtime state sと、一致すること、もしくは近似すること    team  チームのハイレベルの同期  高いレベルで共通の目的を持つ 進捗を伝えるベストプラクティスに従う ハイレベルの同期のためには、  ミッションステートメントの共有 ミーティング  地理的障害があることを意識する 設計文書の共有    ミッションステートメント  やることは単純  チームの方向性を定義して、 プロダクトのスコープを制限する  Making GWT Betterの例を見よ   ミッションステートメントを書くことで  認識の違いを明らかにし 方向性に合意でき  これがなければ、スピードが落ちるか、停止するかのどちらかになる  共有することができる  再評価する  会社の方向性に合わせねばならない    ミーティングについての5つのルール\n 絶対に必要な人だけ  新しいものの設計で5人以上は不要 その時間に別作業している人は会議に参加しなくてもよい人だから誘うのを間違えている。  アジェンダを作って、ミーティング開始前に配布する  ミーティングを設けない日や時間を設けて、クリエイターの時間を設ける  ミーティングのゴールを達成したら時間前でも終了する ミーティングを順調に進める  取り仕切る人がいるようにする 15分以上のスタンディングミーティングをやめろ  ミーティングの開始時間を強制的に中断される時間の前に設定する   地理的障害のあるチームで働くことを意識する  「メーリングリストで議論がなかったら何も起きていない」というモットー  チャットの後「リアル」としてのメーリングリストに投稿  リモートから話しかける時  机に向かって歩いていくかのような自然な感じであれ 積極的にチームとコミュニケーションをし  自分の存在だけでなく こちらの仕事も知ってもらう   フェイストゥーフェイスの帯域を過小評価してはいけない  (これは、このブログでもさんざん述べているが、かなり情報量が多い)   設計文書を、コードの前に、書くこと  未来のハイレベルな青写真  何をどうしたいのかを低コストでチームに伝える手段でもある。  設計文書は、コーディング開始後で「生きた文書」として扱う  プロジェクトの進行に従って、更新していくべき  設計文書を書くか、スクラッチから作るかは、経験で判断すること  設計文書を書く時間で何度もスクラッチから書き直せるなら、その文書は時間の無駄であったりする    ハイレベルのゴールに合意できた後で、\n チームの日々の調整に使うツールを与える  ツールはたいてい帯域が狭い  誤解やHRTの欠如に繋がる  でも欠かせられない  少しの手間で生産性を大きく高められる   メーリングリスト  議事録・ミーティングのメモ・決定事項・設計文書を記録するのには使った方がいい 検索可能にしておこう  オンラインチャット  いいぞ 物理空間の事情を考えなくていい  前提としては、通知をOFFにしていること   課題管理ツールを使おう  ただの掲示板 課題をオフィシャルにして、みんなの目に触れられるようにする  オフィシャルであるとは  粗暴な振る舞いを許すな 話や議論が長くなったらメーリングリストでやれ     エンジニアのコミュニケーションについて\n コードコメント  「なぜ」を説明するもの  「何」ではない  中庸を知れ コメントスタイルをチームで決めよ  一貫性を守る方が大切  関係なパターンマッチングによる推測が可能になる  使用を制限する機能についても決めておこう   Authorタグをつけるな 全てのコミットにコードレビューせよ  変更はレビューしやすいように小さく コードレビューは  品質を向上させ 品質に対するチームの誇りを育む   リアルなテストとリリースプロセス\n 自動テストを増やせば、バグ修正や機能追加の際に自信を持てる テストをコーディングやレビューのプロセスの一部にする  徹底的にテストを行え  頻繁にリリースできるようにリリースプロセスを調整せよ  ユーザーからの信頼を獲得せよ   文化やコミュニケーションの習慣\n 好みの反映  「好み」には適切な人と正しい価値が必要  主観的ではない 自然発生ではない チームリーダーと創業者が  機能不全のチームのコストを理解して、 丁寧に種を播いて育てていくもの   文化の定義や防御よりもこーどの設計や記述に時間を欠けれる\n 防御には、新来者への説明を含む コードを書くことを目的とする強いチームを作ることには膨大なコミュニケーションが必要  コードは、人と人とのコミュニケーションである。   "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/08/20201108log/",
                "title": "20201108log",
                "section": "post",
                "date" : "2020.11.08",
                "body": "昨晩のお酒が残っていて、今日も虚無な一日を送ってしまった。\ndiary alcohol 昨晩のアルコールのせいで、だいぶ眠っていた。\n蕎麦を食べて、お腹を休ませる\nfriend 昨日会った人は、久しぶりに、この人とまた会いたい、と思わせられる人物だった。\nなぜかはわからない。\n少なくとも、私は、その人との会話で幸福を覚えており、今日に至っても満足感がある。\nこの人がどんな判断をするか、とか、この人と同じ体験を共有したいと思った。\nHumidity 相手の判断について、私は、その判断をまず否定することをしなくなっている、ということに気づいた。\nだいぶ前は何事も「いや」という言葉からスタートしていた。 しかし、最近は疑問に思っても「そうなんですか？」とか「ちょっとわからないですね」という言葉からスタートするようになっている。\nこれで狭量が広いと判断されるようになっているのだろうか。\n少なくとも、相手の判断について、謙虚を私が抱きながら、接することできるようになったのだろう。\n今日の勉強 rust TRPL\n pp. 80-85 スライス型  所有権のないデータ型 コレクション全体というよりかは、そのうちの一連の要素を参照することができる。 コレクションの一部を参照しようとするときに問題になること  参照して、欲しい部分の添え字を取る 参照＋添え字で意味を成す 参照が可変なら変更され、全体の意味がなくなる 同期が取れないという不安が発生する  そこでスライスが生きる  文字列スライス  Stringの一部への参照  \u0026amp;s[starting_index..ending_index]  ..で範囲を取る  starting_indexからending_index未満の範囲  [と]とで、スライスを生成する  スライスのデータ構造は、以下の2つを保持している。  開始地点へのポインタと スライスの長さ   範囲添え字は有効なUTF-8文字協会に置かねばならない   文字列スライスを表す型\u0026amp;str 文字列スライスを使うことで、Stringへの参照が有効であることをコンパイラが保証してくれる  何かへの不変な借用があるときに、さらに可変な参照を得ることができないから。   "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/07/20201107log/",
                "title": "20201107log",
                "section": "post",
                "date" : "2020.11.07",
                "body": "香水の一番良いところはその香りであるよりも、その残り香であり、離れた後でもその人のことを思い出せることにある。\ndiary perfume 香水を上手に使う人はすごいと思う。 どうやっても、その人のことを思い出してしまうからである。\n意識的にドライにプロファイリングする時でも、その香りで判断が邪魔されてしまう。\nenginnering culture エンジニア文化はすごくドライというか、毎日勉強や訓練をすることや、リリースすることに追われてしまう側面があり、逆に人間的側面が軽視されがち。\nそれをエンジニア文化に属していない人からすればそれはすごく怖いところと思われがちである。\nしかしながら、人間的側面が必ずあるから、私はそこを補うために活動をしているということもまた、エンジニア文化の性質を知っている人からすると、なぜ敢えてドライな文化においてそういう人間的側面を敢えて重視し、評価されないかもしれないところのことをやろうとするのか疑問視される。\n人間的側面が必ずあり、そして、その人間的側面を補うことが、隣人に求められているからである。\nsummer school 今年の夏は京都に行けなかった。悔やまれている。\nまた、来年の夏もどうも行けなさそうである。それもまた後悔を産みそうであり、嫌だ。\n今日の勉強 rust TRPL\n pp. 73-80 所有権ではなく、引数としてオブジェクトへの参照を取る、つまり借用する関数がある  実引数には\u0026amp;s1 仮引数には\u0026amp;String  \u0026amp; が参照を指す  参照外し演算子は*    変数の値を参照する参照  変数の値を所有しない ゆえにその参照がスコープを抜けても、その値はドロップされない  借用した値の変更を試みるとコンパイルエラーが発生する  借用もデフォルトは不変  可変な参照  実引数には\u0026amp;mut s1 仮引数には\u0026amp;mut String  可変な参照の制約  特定のスコープの特定のデータに対しては、1つの可変な参照しか持てない。 データ競合が起きる条件は以下の3つであり、これらの条件が満たされる場合に、コンパイルさえしないならば、データ競合が発生しない。  2つ以上のポインタが同じデータに同時にアクセス 少なくとも1つのポインタが書き込みを行っている データへのアクセスを同期する機構が使用されていない。  新しいスコープを生成し、同時並行でなくせば、複数の可変な参照を作れる  可変と不変の組み合わせでも類似の規則があり  同じスコープ内で不変で借用した後に、可変で借用というのはできない  不変参照の使用者は値が変わることを想定していないから   宙に浮いた参照  ダングリングポインタ  他人に渡されてしまった可能性のあるメモリを指すポインタのこと  これはその箇所へのポインタを保持している間にメモリを解放してしまうことで発生する   Rustは参照がダングリング参照にならないように保証する  コンパイラは、参照がスコープを抜けるまでデータがスコープを抜けることがないよう確認する  もしそれをやろうとすると、ライフタイムパラメーターを使え、と怒られが発生する    参照の規則のまとめ  任意のタイミングで  以下のいずれか一方を行える  1つの可変参照か 不変な参照をいくつでも   参照は、常に、有効でなければならない   team 『Team Geek』の0章、1章、そして2章の途中まで読み直す。 メモを作りつつ、近いうちの会社での発表に向けて、準備する。\n プロジェクトの成功には以下の2つの要因が必要である  優れたコードという技術的要因と みんなの協力という人的要因  人間は難しく「人間は断続的なバグの大きな塊」 その一方で、チームは個人の生産性や幸福に直接影響する   天才の神話  天才はコードを隠さない  優れたコードだとしても不十分  コードを隠すのは不安の裏返しである 天才の本当の功績は、チームとうまくやることができたこと 1人でやることは失敗のリスクが高まる。みんなでやることのメリットが高い。  失敗に早期に気づける  プロジェクトには、高速でのフィードバックループが必要  プロジェクトののバス係数が高まる スケールできる  チームが全て  謙虚、尊敬、信頼、これを自分が持ち、相手も抱けるような環境を作ることの重要性。  HRT、これらが健全な対話とコラボレーションの基盤  これらが欠如すると人間関係が衝突する  人間関係は、プロダクトやプロジェクトより、長く続く  これらがあると、いざ困ったときに、助けられる  謙虚  エゴをなくす  コミュニティは信じられないほど強力なアイデンティティがある  自分の学習のための時間を作る  コードの指摘には謙虚になり、相手に尊敬を含め、相手が恩恵をもたらしてくれると信頼する。 失敗、学習、反復  不完全を見せても構わないという謙虚さを持ち、 ユーザーが、対応を賞賛し、改善を要望するという信頼で、 失敗の文書化(ポストモーテム)をする  何を学んだか、何を改善するか   忍耐を学ぶ 影響を受けやすくする  間違いや能力不足を認める  謙虚さを見せる  他人の意見を信頼する この正直さと強さは尊敬を産む   チーム文化を作ることで、自己選択的な文化になり、また、外部から来た悪意ある人や文化を排除することができるようになる。  文化はイースト菌のようなもの  そしてその種菌が重要  チーム文化とは、エンジニアリングチームが共有する、経験、価値、目標 まず優秀なエンジニアを雇う 強い文化は自己選択的な文化である  文化に合わない人は、事前に遠ざかってくれる  合意ベースのマネジメントなら、チーム全体が意思決定プロセスに参加できる  チーム全員がプロダクトの成功に強い責任を持ち リーダーがチームの意見に耳を傾けること(尊敬)  チームメンバーの接し方  HRTを持っていればよい 前向きな批判をしてくれる友達や同僚を見つけよう  文化が、積極的なのか、のんびりなのかを理解し、  新来者に支配されないように気をつけよう   コミュニケーションなしには正しいコードを書いている保証ができない。  同期コミュニケーションの人数を減らし 非同期コミュニケーションの人数を増やす   Isabelle Concrete Semantics\n Big Step Semantics with Error Propagationの定義を読む  久しぶりの Concrete Semantics なので、定義の趣旨を完全に忘れている。  Big StepにおけるDの健全性の証明を読む  Small Stepの場合に比べて、かなり単純になっている。 WhileTrueの場合の証明の部分で、command cに対する帰納法の適用を行っていることに気づくのが遅かった  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/06/20201106log/",
                "title": "20201106log",
                "section": "post",
                "date" : "2020.11.06",
                "body": "大凡の発言には裏がある。\ndiary something more than meets the eye 大凡の発言には裏がある。もしくは裏があると思われる。さらには裏があることにされる。(少なくとも私はそうする。)\n敵意を向けてくる人の発言には、裏があると見なし、それの裏を見つけ、それを逆手に取って相手の弱みを作る。\n好意を向けてくる人の発言は、正直に受け止めて、裏にある問題・課題もしくは理由を察して、それの解決を探る。\nゆえに、自分が発言する側になるなら、発言は慎重にし、そして、ボディランゲージと声色で裏がないと見せるようにする。 (メールなどの文書はより慎重にする。メールは証拠として残るうえ、発言以外の情報が伝えられない。)\nコミュニケーションはとても難しい。\nMFA 二段階認証自体よりも、途中で発生するゴミデータの処理をどうするか悩ましい。\nclean architecture クリーンアーキテクチャ、責務の階層ごとの分離はできるけれど、コード自体の綺麗さや、機能ごとの分離はコーディングする人の脳の混乱具合に左右される\n(私の脳は混乱しているので、機能ごとの分離がクソ)\n今日の勉強 rust TRPL\n pp. 71-73 関数に変数を渡すと、代入と同様に、moveやcopyが行われる 値を返すことでも、所有権は移動する 変数の所有権の基本  別の変数に値を代入するとムーブされる ヒープにデータを含む変数がスコープを抜けると、dropによりヒープデータは片づけられる  なお別の変数にムーブされていない限り   所有権を取り、戻す、というのは面倒  関数に値は使わせるものの、所有権は取らないようにする 渡されたものを返すのが煩わしい  タプルで返すことは可能  でも大げさすぎる   参照という機能がある  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/05/20201105log/",
                "title": "20201105log",
                "section": "post",
                "date" : "2020.11.05",
                "body": "窓口を明確にすることは本質を変えないが、楽にはしてくれる。\ndiary interface 窓口を作っても本質を変えるわけではないが、次の一手を探りやすくしてくれる。\n窓口やインターフェスを作ることは、伝えるためのフォーマットをこちらから相手に強制でき、かつ、相手は伝えたことを確証できるようにさせる。 これにより、「言ったのに！」とか「いや、伝わっていない」とか、もしくは伝え方におけるミスいう事象を排除できる。\nそもそも、複数のエージェント間で、お互いが特定の知識を持っており、そのうえで、お互いがその知識を持っていることを知っているという、共有知識が成り立つためには、なんらかのアルゴリズムが必要である(アルゴリズムがなければ共有知識は成立しないが、アルゴリズムがあれば共有知識が成り立つわけではない)\nしかしながら、フォーマットを策定して、伝え方がよくなり、そして、共有知識を確保したところであっても、次のアクションがなければ意味がない。\nもちろんその通りであるが、相手が定まった形式で伝えてくることで、どういう内容を伝えてくるのかが受け手にはわかりやすくなり、そして、どういう流れでそのあとの話を進めるかも手探りしやすくなるというメリットが、フォーマットの策定には意義がある。 (伝達でのミスを解消するためには誰かがハンドリングしないといけないが、その誰かをフォーマットにするのが楽である。(そのフォーマットに従わない邪悪な人は文化に従わせよう))\n人間のコミュニケーションが不完全であるから、1つずつやっていき、よりフィットするコミュニケーションのあり方を調べていく。\nsandwitches オフィス近くのステーキサンドイッチショップを見つけて、社内で共有したら、結構多くの同僚が行っているらしいことが判明した。\n美味しい店があっても人がこないと意味がないし、私の財布と胃袋は有限な上に、私の好みはあるので、色々な人に楽しんでもらいたい。 よい共有を行えたと思う。\n今日の勉強 rust TRPL\n pp. 65-68 ヒープデータへのポインタを含む変数のコピーでは、確保されたメモリをコピーする代わりに、コピー元のスタック上のコピー元のを有効ではないとする、つまり、無効化された参照とする。  Copy Traitを実装していないからダメとCompileでエラーが起きる。 shallow copyでない  ヒープデータのコピーなし、 ptr, len, capacityの三つはコピーする しかし、最初の変数を無効化するわけではない  自動的にデータのdeep copyは行われない  自動で行わないから実行コストが低い ヒープデータまで含めたコピーをしたい場合は、メソッドcloneを使う。  moveは、ptr, len, capacityをコピーして、前の参照を無効化する。  通常のコピー  スタック上にすっぽりおさまるようなもの その場合、shallow copyとdeep copyの違いがなく、cloneしても変わらない  Copy Trait  スタック上に保持される方に対して配置される注釈 代入後も古い変数が使用可能  何らかの形態のリソースだったりするものや、メモリ確保が必要なものはCopyではない  単純なスカラー値の集合はなんでもCopy  Drop Trait  これを実装している場合、Copy Traitによる注釈をさせてくれない。  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/04/20201104log/",
                "title": "20201104log",
                "section": "post",
                "date" : "2020.11.04",
                "body": "昨日の予想通り体調が崩れた。\ndiary 昨日、夜まで仕事して、お酒も飲んでしまったので、日課が崩れて、今日の体調も崩れた。\nvacant 虚無な一日を送ってしまった。\n昨晩、薬を飲み忘れ、朝も薬を飲み忘れて、何もできなかった。\nご飯食べて寝るという生活をまた送ってしまった。\n休息は日常生活において重要な役割をはたしているが、それでもなお、虚無な一日を送ることはつらさがある。\necs 朝起きたら、無限再起動ではなく、無限タスク起動が起きていたことが判明した。\n次回の出社で修正する。\ndream 夢の記録\n 部屋の隅で蜘蛛が巣を張っている。 黒と紅。コントラストがキレイ。 蜘蛛がたまごを抱えている。 親の腹を子供たちが食す。  今日の勉強 rust TRPL\n pp. 65-68 文字列リテラルが不変であるから、中身がコンパイル時にわかっているから、バイナリに直接ハードコードされ、高速で効率的になる。 サイズが不明・可変なら、テキスト片用に一塊のメモリをバイナリに確保するのは不可能 String型は、コンパイル時に不明な、メモリをヒープに確保して内容を保持する  メモリは実行時にOSに要求する(String::from) String型を使用し終わったら、OSに個のメモリを返す方法が必要  GCがある言語なら、使用していないメモリを自動で解放 GCがない言語では、明示的に返還するコードを呼び出すのはプログラマの仕事  これの難しいところ:  返還忘れで、メモリの無駄な使用 返還が早くて、無効な変数を生成 返還を二回して、バグを生み出す   Rustが歩む道は、所有権  メモリを所有している変数がスコープを抜けたら(ここが自然な地点)、メモリを自動的に返還する  スコープを抜けたところで、drop関数という特別な関数が呼ばれる  ヒープ上に確保されたデータを複数の変数に使用されるような、もっと複雑な場面でコードの振る舞いは予期しないものになる可能性がある    複数の変数が同じデータに対して、異なる手段で、相互作用する  不変な場合、整数などの既知の固定サイズの単純な値の場合は問題にならない  スタック上に保持されているので、変数のコピーを作成することは、スタックのデータをコピーしている。  String::fromで生成されたものは3つの部品で構成されており、それはスタック上に保持されている。  ptr: 文字列の中身を保持するメモリへのポインタ  その中身はヒープ上に保持されえている。  len: 現在使用しているメモリ量をバイトで表す「長さ」 capacity: OSから受け取った全メモリ量をバイトで表す「許容量」  String型の変数をコピーすることは、スタック上のデータのコピーをしており、ヒープ上のデータをコピーしない 問題点  変数がスコープを抜けると、Rustは自動的に、その変数が使っているヒープメモリを開放する スタック上のデータをコピーした変数、両方は、同じヒープメモリを見ている。 両方の変数がスコープを抜けると、2重解放が発生するのでは？  2重解放の問題は、memory coruptionを産み、脆弱性を産む可能性がある (moveの話につながっていく)    "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/03/20201103log/",
                "title": "20201103log",
                "section": "post",
                "date" : "2020.11.03",
                "body": "久しぶりに3時間ほど残業した。\ndiary 久しぶりに3時間ほど残業した。 私のミスを私が修正するためのものなので苦痛ではないが、明日の体調が気になる。\nalcohol and bar BARでお酒を飲む\n ビール(496) ハーパー(12年)  溶液臭さのあるバーボン お腹にくる感じでよい   飲み屋を支える人というのはどういう人かわからないが、過去に100本以上ボトルキープした人もいるらしい。\ncommunication お酒を飲みに行って人と会うことは好きだし、チームをよくするために人と話すのも好きである。 しかし、人を会うことや人と話すことを主目的にする場合はより苦手であるし、他に主目的があるからといっても、苦手なのは苦手である。\n苦手であることについて繰り返し述べているが、人と交流するのが苦手と述べる際に、具体的にどういうところで苦手さを感じているか。 私は、人とのコミュニケーションを、まるで映像のように思い出してしまう。 そして、人とのコミュニケーションにおける自分のコミットメントを重く捉えてしまいがちである。 これら忘れることができない、そして責務を重く捉えてしまっているところから、苦手さを覚えてしまう。\n仕事においては仕事の範囲で捉えるようにしたい。\nHanlon\u0026rsquo;s Razor 人とのコミュニケーションでさんざん悩んできている人間なので、他人の見方に関して、多少なりお悩み解決的なことはできる。 例えば、他人をネガティブに見てしまうことで悩んでしまう人がいる。\nまず第一に、ネガティブに見てしまうこと自体は悪くない。 しかし、ネガティブに見すぎてしまうことは、相手への尊敬の念がないことの表れになり、コミュニケーションがうまく回らなくなる可能性がある。 つまり、ネガティブに見たとしても、別の見方を一度はした方がよりよくなる確率が高まる。\nどう別の見方をするのか、ということを考えるためには、同じ事象であっても状況が異なる場合において、よく人をネガティブに捉える人でも、必ずしも否定的に他人を見るとは限らない場合があることを考えよう。 例えば、路上喫煙をしている人を見たとしよう。この時、その人を見て、以下のように異なる判断をしないだろうか。\n 路上喫煙している日本人を見て、この人は悪い人と思う 路上喫煙している外国人観光客を見て、この人は日本の法律や条例や文化を知らないんだ、と判断する  こういった判断の違いはしばしば発生していると思う。これは差別とかではない。 その人の行為の善悪は置くにしても、その人の行為の理由を推測することによって、その人の行為に対する評価が異なることがあることが重要である。\n上記の事象と同じことを、普段の判断にも転用してみたら、他人の上げ足をとるようなことはしなくなり、楽になり、そしてコミュニケーションが楽になるのではないだろうか。 ハンロンの剃刀と一緒で、無知で済む話は悪意に持ち込まないようにしよう。\nファーストインプレッションでの認識の操作は、文化や知識という、その人の状態に対する判断をするという、事実ではなく文化や環境から判断をする、ということによって達成できる。\n今日の勉強 ecs タスク定義を間違えて、ECSの無限再起動を犯してしまった。\nなんとか修正。\nrust TRPL\n pp. 61-65 プログラムは、実行中に計算機のメモリの使用方法を管理する必要がある  GC 明示的な確保と解放 コンパイラがコンパイル時にチェックする一定の規則とともに、所有権システムお通じて管理  Rustは第三の道を歩む より自然に安全かつ効率的なコードを構築できる   スタックとヒープ  この違いで言語の振舞い方や特定の決断を下す理由などに影響以上のものを与える  スタック  データを追加する(push to)のも取り除く(pop from)のも、常に一番上 last in, first out  スタックにpushするのはメモリ確保とは考えられない   ヒープ  コンパイル時にサイズが不明なデータや、サイズが可変なデータの場合にヒープに格納する データを置くとき、つまりヒープに領域を確保する(allocate on the heap)ときにやること:  あるサイズのスペースを求める ヒープ上に十分な大きさの空き領域を見つけ そこを使用中にし、 ポインタを返す  (実データを取得するとき、ポインタを追いかける)    現代のプロセッサはメモリをあちこち行き来しなければより早くなる コードが関数を呼ぶと  関数に渡された値がスタックに載る 関数のローカル変数がスタックに載る  関数の実行が終了したら、これらはスタックから取り除かれる   所有権が解決する問題  どの部分のコードがどのヒープ上のデータを使用しているかの把握 ヒープ上の重複しているデータを最小化 メモリ不足にならないようにヒープ上の未使用データを掃除  所有権を理解したら、ヒープとスタックに関して、頻繁に考える必要はなくなる 所有権の存在理由: ヒープデータを管理すること\n 所有権規則:\n Rustの各値は、所有者と呼ばれる変数と対応 所有者はいつも1つ 所有者がスコープから外れたら値は破棄される  変数スコープ\n 変数の有効範囲  変数が宣言された地点から、 現在のスコープの終わりまで  スコープに入ると有効になり抜けると有効でなくなる    String型\n 所有権の規則の具体化のために、より複雑な、ヒープに確保されるようんま、データ型を見る 文字列リテラルは不変 全ての文字列値が判明しているわけでは必ずしもない よって、ヒープにメモリを確保し、コンパイル時にサイズが不明なテキストも保持するように、つまり可変にしたい  それがString型  文字列リテラルとString型とでは、メモリを扱う方法に違いがある  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/02/20201102log/",
                "title": "20201102log",
                "section": "post",
                "date" : "2020.11.02",
                "body": "主戦場を探さねばならない。\ndiary how to be mature なぜこの世に生を受けたか。それはこの世を罪から救うという計画に参画するためである。\nでは、最もこの世を罪から救うことができる場所・役割はどこか。 そして、神の目を通して、キリストに繋がっている自分を見つめ、自分のなりたい像のクリアなビジョンは何か。 私はそれらを知らない。\n今私は自分のなりたい像のクリアなビジョンを抱けていない。そしてこの世を罪から救うための主戦場を見つけられていない。 一方で、自分は仕事でやるべきことがあり、必要とされていることがある。 しかし、隣人に貢献をすることの前に主を愛するのが第一である。 主を愛し、そして、運命の場所に私は至らねばならない。その運命の場所は主により定められていることである。 今私が必要とされていることはあれど、それが運命の場所から遠ざかることであるならば、それはやめるべきである。\nしかし、運命の場所をしるためには、自分のなりたい像のクリアなビジョンを抱き、何をするべきかを計算しなければならない。 そのためにも、なりたい像のクリアなビジョンの獲得、運命の場所をしること、隣人に貢献すること、主戦場を探索すること、と相互反復にやっていかねばならない。\n「大人」になる、というよりかは、キリスト者として成熟するためには、自分のなりたい・なるべき人物像のクリアなビジョンを獲得しなければならない。 (これらは繰り返し述べているが、繰り返し述べて、忘れてはならない)\nmature as a christian and as a teammate teamのところで語っていることは、それは、キリスト者としての生活も関わっているからである。 キリスト者として日々重要視している7か条がある。\n 喜び 祈り 感謝し 霊の火を消さず 預言を軽んじず 全てを吟味し良いものを大事にし あらゆる悪いものから遠ざかる  上記のキリスト者としての聖なる生活、穢れのない心を持つこと、これはHRTの原則と重なっているところが多い。 キリスト者として生活し、また、よきチームメイトとして振舞い、そして、運命の場所に至らねばならない。\n最近チームメイトとして課題としていることは、チームの外部とのコミュニケーションをどうにかすることや、時刻の変化に伴うチームのやり取りをどうするか(時間的に将来のチームと今のチーム、また、過去のチームと今のチームとのやり取り、というのはどうしても発生する)、ということである。 これは面白い挑戦であるだろう。 (私が今行っている仕事を他の人にお願いするという水平スケールをやる必要になるのでその点もよいことであろう) (建設業と一緒で、エンジニアリングにおいても職人が一番偉いのであり、外部とのインターフェースの役割を果たすマネジメントとかはそれほど価値を見いだすことが今の私には見いだせない)\nこれ、ほんとうに、自分のなりたい像なのか、運命の場所に近づくことであろうか。疑問を抱いている。 (やった方がいいことであり、これをやっておかないといずれ破滅に至るであろう。)\nsnus SNUSを愛用している。 SNUSというのは、噛み煙草とよく間違えられるが、唇と歯茎の間に配置し、そこからニコチンを摂取するものである。 無煙たばこと分類されるものであり、私は勤務時間中にもこれを口に放り込んで、おかげでニコチンをずっと摂取でき、タバコ休憩をすることなく業務に集中できる。 SNUSのニコチン量はかなり幅があり、私が愛用しているのはsiberiaと呼ばれるシリーズのものである。\nさて、昨日のシガー講習会で、愛用しているそのsiberiaの赤が日本のたばこ店でも取り扱いが始まったことをしった。 どうも日本においてもそこそこキツイSNUSの需要が増えているようだ。\nしかしながら、1缶1100円と、現地価格の倍以上であることがわかった。 さらに、海外は日本とは異なり、まとめ買いやシーズンでの割引を許されているので、結果個人輸入しても、送料や関税を払ってもどうやっても安い。 SNUSにおいて何より良いことは、値段に対してのニコチン量のコスパがよいことであり、日本価格の1100円だとコスパがほとんど一緒になってしまう。 というわけで、今後も引き続き個人輸入する。\nmental メンクリに行った。記録を録っているので、問題の列挙と、要望を的確に伝えられた。\nスルピリドを再度もらった。 スルピリドは以前食欲が湧かないときにもらったが、先日の抑うつ状態の解決に使えたので、欲しいと伝えた。\nこれで服用している薬としては、デパスを睡眠前に2錠、朝食と夕食後にスルピリドを1錠、となった。\nそういえば、昨日のシガー講習会の中で参加者の方が語っていたことに、 肉、甘味、蒸留酒、シガー、という一連の流れは、脳幹を通って脳に快楽物質を生成・放出するものを伝え、そして、胃腸を整えてくれるということがあった。\n今日は、それを踏まえて、カレー、きのこの山、煙草、と楽しんでみた(アルコールは摂取しなかった)。\nキリスト者としてチームメイトとして活動するためにも、抑うつ状態と不眠は避けねばならない。\n今日の勉強 rust TRPL\n pp. 56-60 フロー制御のループ  本体内のコード尾最後まで実行し、直後にまた最初から実行を開始する  loop  ずっと回り続ける Ctrl + cかbreakキーワードかで、プログラムの実行を終了できる  while  条件付きループ  loop, if, breakで作れるが、while使う方がいい  条件が真の間ループが走り、条件が偽になったとき、真で亡くなった時、breakを呼び出す  for  コレクションの覗き見 whileやloopでも実装できるが、これらではコードの安全性が落ちる  添え字の長さの間違いによる、パニックの発生や見落としの発生 毎回教会地チェックを行うようなコードになるので、実行が遅くなる  forループだと安全性を損なわない  配列の要素数を変えてもパニックが起きない  Range型を使っている  疑問: サンプルコードで利用しているのはIter型を返しているようだが、Range型とIter型との関連は？    課題とされていたもののうち、 フィボナッチ関数の実装と\u0026rdquo;The twelve days of christmas\u0026rdquo;の歌詞の生成の実装をやる。\nteam  ソフトウェアを書く理由は、他人が幸せにすること。 だから、  他人が幸せにならなければ、 feedback loopの方法を身につけなければ、 ソフトウェアは死ぬ。   User Engagement\n ユーザーの気づき(マーケティング; どのように見られているかに気を配る) ユーザーの体験(ユーザビリティ; ユーザーが離れるのを避ける) ユーザーとのやり取り(顧客サービス; 長期的な関係構築が、ソフトウェアの進化とユーザーの定着に影響を与える)   マーケティングは、エンジニアリング文化で重要視されている事実ベースと相性が悪いが無視できないが、うまくやる方法がある  感情的な知覚に配慮する  認知したもの勝ち  第一印象に注目する 小さく約束し、大きく届ける(見積もりを大きくしたり、予告をしなかったり) 業界のアナリストとうまく付き合う  ユーザーに集中すれば、他のことは全てついてくる  これが、プロジェクトの成否にも関わる 観客を選ぶ  最重要なのは、ユーザーの技術的能力を考える  入り口のハードルを下げる  最初の体験が超重要。 アカウント作成を強要しなかったり、スピードを優先したり、と。  ユーザーではなく、利用を計測する 速度重要  速度は機能ですらある。(非機能要件とよく言われるが、Googleの人は機能要件と捉えているようだ) レスポンスが速ければ、待ち時間が短くなり、何度でも使うようになる  無意識により多く使うようになる  利用数の停滞の原因は、多くは速度・スループットにある。  多くのユーザーの共通の問題を解決する ユーザーにとって使いやすいソフトウェアを作るためにはなまけないこと 複雑さを隠す  複雑さを隠し、簡単なことをしているように感じられるようにする、つまり抽象化する(インターフェイスの柔軟さ)  しかし、ユーザーを不自由にしてはいけない  抽象化が漏れる場合のバイパスを用意すること  ユーザーの信頼を得ることが最も大切なリソースである  これのために、インターフェイスの回避を用意すること     ユーザーとの関係の管理\n ユーザーは話や自分の意見を聞いてもらいたく、関係を築きたいと思っている  話や意見の存在や内容を認知することが重要 ユーザーはHRTのある会社なら好きになる  ユーザーと開発者との間に壁を作ってはならない  ユーザーの増加は技術能力の平均レベルの低下を招き ユーザーの失望を増やし 苦情の増加を招く けれど、その苦情を開発者に届けさせないことはダメなことだ。   見下さない\n ユーザーの質問や意見はユーザーの知能とは関係ない ユーザーに敬意を払おう  我慢する\n ユーザーは問題をうまく表現できない  語彙の統一がされていないという問題がある   信頼と喜びを作ろう\n 信頼  おおよそ感情的に正の状態が積み重なった結果のもの すぐ吹き飛ぶ 最も大切なリソース  残高に気を配ろう 長期的なイメージを持とう   喜び  幸せな気分にさせる驚き  ユーザーを大切にしていることを伝える     HRT、これの欠乏が問題を引き起こす\nHRTの原理を、『Team Geek』では、以下のように広げていった。\n 自分 チーム チームをリードする方法 チームの外部とのやり取り ユーザーとのやり取り  この手法は、エンジニアリングのみならず、あらゆるコミュニティが対象となる。\n要約は以上。\nメモを録っていなかった前半の章を合わせて、会社で発表するための資料を後日作ろうと思う。\nisabelle Concrete Semantics\n pp. 151-152 com x state =\u0026gt; state optionという案  semicolon ruleで問題となる  option型とそうでない方とを組み合わせた規則で、かつ、Noneの場合とそうでない場合との2通り作ることになる  一度に全てをやりたい  com x satate option =\u0026gt; state option  入力も出力もoption型にしよう。 produce error propagate error  求めるstatement: well-initialized programs cannnot go wrong  [| D (dom s) c A', (c, Some s) =\u0026gt; s' |] =\u0026gt; s' /= None  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/11/01/20201101log/",
                "title": "20201101log",
                "section": "post",
                "date" : "2020.11.01",
                "body": "葉巻を楽しんだ。\ndiary cigar 今日は、五反田にあるシェリーミュージアムにて、葉巻の講習会に参加してきた。\nシェリーミュージアムに行くのは初めてで、どういう周辺を10分ほどうろうろしてしまった。 五反田には時々行っているが、それほど夜の街を知らない。\n講習会では、葉巻は4本いただき、その場では2本楽しんだ。 講習会は初めての試みらしく、形式とかは特に定まっていなかった。 講師の方(もともと知り合いの方なのだが)がすごく楽しそうに語られていたのが、何よりもよかった。 また、もともと葉巻の細かいところや深いことについては知らなかったので、よい勉強になった。(初心者向けだったり、中級者向けだったり、上級者向けだったり、という話が混在していた。)\nカットがへたくそな人間であるが、今回でやっとある程度つかめたかもしれない。\nシェリーはショット計算で大体10くらい。あと、スコッチとラムをそれぞれハーフショット。\nシェリーは辛めから甘目まで色々あり、楽しめた。 今回はシェリーの講習会ではないので、詳しくは聞くことはなく、葉巻の前半、中盤、終盤とのペアリングを調べながら楽しんだ。\n他にも色々と面白い話があった。アロマとブーケの違いとか。 特に、コーヒー、樽酒、煙草、これらの様々な化学的類似点や文化的背景とかが聞けたのは面白かった。\n今の日本ではほとんどない純喫茶の発生経緯とか、最初の純喫茶と、日本の純喫茶の共通点とか、が特に覚えている。 純喫茶が近くにないだろうかと疑問を持った。 (調べたら、新宿の珈琲貴族エジンバラも純喫茶に分類されるらしく、実はすでに訪れていたのであった)\nゆったりとニコチンとアルコールを楽しみながら、他人の話に傾聴する。これはとても有意義な時間の過ごし方であった。\ntired 今日は昨日の疲れが残っているようで、朝寝坊して、朝ごはんを食べて寝て、昼ご飯を食べてさらに寝て、と睡眠を繰り返していた。\n夜の葉巻講習会には無事に参加できたのでよかった。\n今日の勉強 rust TRPL\n pp. 49-56 関数の戻り値  戻り値に名前を付けない 戻り値に型をつける  関数の引数の後に、「-\u0026gt; + 型」で付けられる。  関数の戻り値は  関数本体のブロックの最後の式の値に一致する  式ではなく文にしてしまうと、空のタプル()になる。  疑問: Rustにおいて、SMLのようなunit型はあるのだろうか？   もしくは、returnキーワードで早期リターンした値に一致する。   コメント  二連スラッシュで始まり、行の最後まで続く コンパイラはコメントを無視する コメントは、色々な種類があり、それに関する議論は14章で行う  フロー制御のif式  「if + 条件式 + { + 実行したいコード + }」という構造になっている。  else式をオプショナルに追加することができる 条件式はbool型でないとコンパイルエラーが起きる  論理値以外の値が自動で論理値に変換されることはない。   else if式で、複数の条件を持たせることができる  条件式が多いと可読性が落ちるのでmatchが有用になる(cf: chap. 6) if 式が順に吟味され、最初に真になった本体が実行され、それのみが実行され、それ以降のif式はチェックすらされない。  let文内でif式を使う。  if式は式なので、let文の右辺に持ってくることができる。  e.g., let x = if cond {a} else {b} ifアームとelseアームとで型が一致していることが要求される。  これは、条件式の値に依存しない。  なぜなら、変数は単独の型でなければならない 単独の型でなければならない理由は、複数の方を追いかけて、その変数が使われている全箇所でチェックすることは、コンパイラをより複雑にし、コードに対して結果的に保証が少なくなるから。    "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/31/20201031log/",
                "title": "20201031log",
                "section": "post",
                "date" : "2020.10.31",
                "body": "どうやって大人になるのか。\ndiary how to be mature 一年ほど前、自分より一回り上の方から、大人になろうと叱責されたことがある。\n大人になるというのがどういうことかわからなかった(今でも正直わかっていない)。折に触れてそれを思い出し、どうすればいいだろうかと悩んできた。 そこからだいぶ時間が経ち、また色々と経験し、そして人の意見を聞いてきて、大人になるということについて一つ以下のようにまとめることを試みる。\n仮説: 若いからという言い訳が効かなくなることで困ることを避けれるようにすることが大人になること\n若いころは、なんでもできるんだと尊大であったり、下に観られていたり、約束を破ったり、学習期間としてそれが認められていた。 しかし、年をとるだけで、それが認められなくなる。 若いころに許されていたことをやると許されなくなる、そしてそれをやらない・避けるようにすることが大人になるということであろう。\nつまり、大人になるというのは、謙虚な人と認識されること、尊敬の念を抱かれること、信頼されること、とHRTの原則に従っている。\nこれらを実現するために、色々なやるべきことがあるだろう。例えば、\n 先日記録したような人に話すときや人から聞くときの立ち振る舞いや伝え方を身につけること、 相手の困っていることを適切に分析し、解決し、相手に貢献をすること、 約束したことは実現し、できないことはできないと伝えること。  上記のことですら、私はまだ完全には身につけられていないし、 大人になるということが本当にどういうことなのかわかっていない。 だから、まだ私は大人になれていないだろう。\n大人になるということに安心感を覚えたり、大人にならざるを得ない環境になりつつあることを予感しつつある私は、大人にならなければならない。\n大人の定義の補足 上記の仮説は、子供ではないという否定からスタートして大人を探すものである。\n大人が満たす性質からそれを探していくことをやらねばならない。 そして、そういったボトムアップの定義とトップダウンの定義の両方が一致することが期待される定義である。\nそして、私が探している運命の場所に至るためには、この定義を見つけねばならない、そして、自分がなるべき人間に関する像に関するクリアなビジョンを抱けるようになり、そして最後に運命の場所に至るのである。\nbuild a desk 水曜日に届いたデスクで、足りていなかった部品のビームが今日届いた。\n天板がとても重くて組み立てるので非常に苦労した。 疲れのあまり、椅子に座りながら眠ってしまった。\n重さのある天板であるということはかなりの広さがあるということであり、かつ、十分な頑丈さがあるということである。\n 広さという観点から語れば、キーボード、マウス、メモ帳などを置けば、それでいっぱいになっていた環境から、それらを余裕をもった間隔で置いてもまだスペースは十分である。 頑丈さという観点から言えば、これまで使っていたIKEAのものだと、ディスプレイアームでクランプで硬く絞りすぎるとへこむということがあったが、そんな心配はしなくて済む。  必要な物品に対して、優先順位を立てて、いちいちものを動かす必要がなくなり、必要な物品をそのまま机におけるのは生活の質の向上すらも感じてしまう。\ntime 今日は土曜日で安息の日としているので、時間に縛られないようにした。 しかし、時間に従った結果に伴う喜びを味わえないのは本当に残念である。\n今日の勉強 rust TRPL\n pp. 45-49 関数  命名規則はスネークケースが慣例  引数  関数シグネチャの一部になる特別な変数  複数を持たせることができる。持たせるときは、,で区切る。  仮引数(parameter)  関数定義の変数 型宣言が必須  実引数(argument)  関数の呼び出しの時に渡す実際の値   関数の構成  複数の文と最後に文か式を置くことで構成されている  文  何らかの動作をして、値を返さない  よって、例えばlet文を他の変数に代入できない  文は終端にセミコロンを含む  式  結果値に評価される 式は文の一部になりうる 式は終端にセミコロンを含まない  終端にセミコロンを含めると文として解釈される  文として評価されると型が()となる   関数呼び出し、マクロ呼び出し、ブロック、いずれも式  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/30/20201030log/",
                "title": "20201030log",
                "section": "post",
                "date" : "2020.10.30",
                "body": "人にものを伝える時は 3 つのissue と 1 つのお願いという形式が楽。\ndiary how to assert 人にお願いするときは、3つの課題と1つのお願いという形式が楽だな、とよく感じる。\nこちらが意図的にコンパクトにしていると、相手がどう読むかわかりやすいし、相手はすぐ読める。(結局、伝えられることが一番だから)\n例えば、以下のような内容があるだろう。\n 小腹が空いていると集中力が落ちます 軽食を買いに外に出るのは時間の無駄です 会社に軽食があると共通の話題を作りやすくなります  お願い:会社におやつを置いてください。\nCommunication 相手への尊敬の念や、共感や労りの気持ちを持つのは非常に難しいが、それっぽいふるまいをするのは簡単である。 (そして、共感をしすぎて共依存するのもよくないから、先んじて境界線を引いておく)\nたとえ、相手の意見やお願いの筋が通っていなくても、一旦それを受け入れ共感を示して、労りとしてやってみて、提示して、やっぱり違うね、という共通見解を得てから、もとの意見やお願いを訂正する、というのが角が立ちにくくなるだろう。 これはとてもコストが高く、無駄が多い。 が、人間は愚かで、伝えられた言葉や伝え方に無駄や冗長さがないと、自分が馬鹿にされた気分になるらしい。\nなんでこれでうまくいくのかはわからないが、うまくいくんだったらその方法を採用する。\nWi-Fi 契約状態を確認して、CAF番号を確認して、終端装置を確認して、サポートされているルーターを確認して、設定し、と一連の作業をしてやっと設定できた。\n全体のフローを先に知っておかないと無駄に時間を浪費してしまう。(およそ6時間ほど時間を使ったことになるが、知っていたら2時間もかからなかっただろう)\n配線もそうだが、専門の業者様が如何に素晴らしいサービスを提供しているか。尊敬を覚える。\n今日の勉強 rust TRPL\n pp. 36-44\n shadowing と mut との違い\n シャドウイングは新しい変数を作っているので、値の型を変えつつ、同じ変数名をつかえる 可変変数の場合は、同じ変数なので、型を変えることはできない  型注釈が必要な場合がある\n 型推論をして、複数の型が推論される場合がある Rustは静的型付け言語であり、コンパイル時にすべての型が判明している必要がある だから、型注釈で型を明示する必要がある  スカラー型\n スカラーは単独の値のこと 整数型  整数型の基準型はi32  浮動小数点型  浮動小数点型の基準型はf64  論理値型 文字型(文字列型ではない)  charはunicodeのスカラー値 補足: 文字はUNICODEの概念ではない。   複合型\n 複数の値を1つの型にまとめることができる。 タプル型: 複数の型の値を1つの複合型に。位置ごとに型が定められている。  タプル型の値へのアクセス方法は、パターンマッチングによる分配か、.0や.1などピリオドと添え字による方法。  配列型: 全要素は同じ型。固定長。  配列型の値へのアクセス方法は、[0]や[1]などのかっこで添え字を囲む。 配列型は固定長であり、サイズの伸縮はできない。ベクタ型という配列型とよく似たコレクション型はサイズの伸縮ができる。  固定長の配列型では、長さ以上の添え字を使った場合、無効なアクセスとして、処理を継続させず終了させる。 疑問: テキストでは、実行時エラーが発生させるとあるが、実際にやってみたところコンパイル時のエラーが発生した。    "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/29/20201029log/",
                "title": "20201029log",
                "section": "post",
                "date" : "2020.10.29",
                "body": "地獄への道は善意で舗装されている。善意で二回オフィスのWi-Fiの設定をしたら今回も依頼されて、地獄だ。\ndiary Wi-Fi Wi-Fiの設定はまじでわからない。これまでと契約先が違うプロバイダを一時的に使うことになったが、本当に大変だ。なんもわからない。明日もそれの対応がある。 (配線や環境構築はその専門の人にお願いするのが絶対コストがやすい)\n何よりもつらいのは、旧オフィスと新オフィスを往復する頻度が多く、かなり多く歩くことになっていることである。\nおかげで近くに面白いバーベキューサンドイッチ屋を見つけられた。\nTeam チームとその外部とのインターフェースについて悩む。\nやりとりを手軽に、かつ、相互の尊敬や信頼を伴ったようなインターフェースは難しい。\n私は人に意見を伺う時や意見を提示するときは、直接相手のところに伺って、相手の目線より下に自分の目を置く、ということをしている。 これは相手への尊敬の念を示すのに非常に効果的であると思っている。 (ウェブカメラでも同様で相手を見下す形ではなく見上げる形にするのがよいと私は思っている。)\n相手に何かを伝えられる自信のない私にとって、物理的な振舞いというのはある種の保証でもある。\nさて、いざこれを個人ではなくチームや部署レベルで実施しようとなると難しい、特にテキストベースだと難を感じる。 というのも、相手にこちらの文章の意図が伝わり切れない、コミュニケーション不全があるかもしれないからだ。それは個人の言い方や伝え方の問題というよりも、その言い方や伝え方をどうして採用しているのか、というところがある。\nこれは、ネットの問題ではなく、人間の問題であり、人間がコミュニケーションに向いていない、もしくは、人間が言語以外の要素に多く頼ってコミュニケーションをしていることが原因であり、さっさと人間は一つになるべきだと私はしばしば思う。\nしかし、人のコミュニケーション能力や言語以外の要素に頼っていることを排除し、1つになるということは現時点ではできないから、インターフェースをよりよくしないといけない。\n銀の弾丸はないので、手探りでやるしかない。チーム内の文化と外部とのインターフェースは協調をもって確立する必要があるのではなかろうか。 (チーム論について隔週で部内で発表するトライについて提案をしてみた。これで解決するというよりも、これで歩み寄り、これで次の一手や方向性を探り出したい。)\nSound チームメイトからお古のDACとアンプを譲り受ける。\n久しぶりの音響関連製品の購入だ。\nこれの効果を直に感じるのは毎回難しいと感じる。この音を出したい、余計な音を削りたい、という強い意志がないと音響関連はその力能を十分に発揮できない。\n画面上での音量の調整ではなく、物理的なダイヤルでの調整を久しぶりで本当に楽しい。\n今日の勉強 rust TRPL\n pp. 24-36  手書きのメモを文章に起こし直す(手を動かしたほうが楽)\n2章\n 変数(let ...で宣言)  immutableとmutableがある。不変がデフォルト。  参照(\u0026amp; ...で宣言)  可変と不変両方ある。  クレート(外部クレートとバイナリクレートがある)  外部クレートはCargo.tomlに記述して、全ての依存をダウンロードさせられ、また、Cargo.lockでビルドされるものを再現できる。 外部クレートを.rsで仕様するために宣言するのにはuse ...を使う トレイトに定義されているメソッドを呼び出せる  関連関数(::)  型に対して実装された関数 疑問: 関連関数とトレイトに実装されているメソッドとの違いは何か。 予測: トレイトはinterface的なもの？  match  armがある  Result型  OK(v)とErr(e)のenum Errの場合.expect()でクラッシュする クラッシュを避けたいならmatchを使おう  シャドウイング(覆い隠し, shadowing)  新しい値で変数の値を覆い隠す 値を別の方に変換したい場合などでよく使われる  loop, break  3章\n コンパイルエラー  潜在しているエラーを見つけ出す手助けをし、 プログラムにしてほしいことが安全に行えていないことを示している  値が不変と宣言すると、コンパイラがそれの担保をする  不変であることのメリットは、変化を追いかけなくてよく、コードを通して正しいことを確認するのが簡単になる 可変や不変と宣言したら、将来の読者に変数の意図を伝えられる 可変である方がよい場合というのは、大きなデータ構造の場合などが挙げられる  変数と定数  定数は不変定数ではない 定数の命名規則は大文字とアンダースコアのペア(e.g., ABC_XYZ) 値の型は必ず注釈する 任意のスコープで使用できる、globalでもlocalでも 定数は定数式にしかセットできない 呼び出し結果や実行時に評価される値にはセットできない  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/28/20201028log/",
                "title": "20201028log",
                "section": "post",
                "date" : "2020.10.28",
                "body": "my new gear\u0026hellip;\ndiary desk 注文してたOKAMURAの机がオフィスバスターズから届いたけれど、部品が足りなくて、部屋の置物と化した。\nかなり重いデスクなので、汗をかきながら設置しようとして、これだから絶望感がひどかった。\nこれについては、お店側に連絡して対応をしてもらい、近いうちに足りない部品が届くことになった。\nwtf 会社でなぜか社内サーバーを導入する流れになっているらしいが、開発部門は全員反対し、 そして、反対している開発部にその助言や設定をお願いするという珍事件が起きている。\nこれについては、さっさと諦めてもらうために、コストやリスクを説明して、冷静になってもらおうと思う。 (もちろん、冷静な判断でその選択を取ることはありうる、という前提で話さなければならない。) (20201017logに記載のある「無能(無知)で十分説明されることに悪意を見出すなというハンロンの剃刀」は思い出して置かねばならない。)\nこういった問題の認識と、要件の確認とは、開発が得意とすることであるから、やっていこう。 あと、人間関係を壊さないようにうまく立ち回ろうと思う。\n今日の勉強 rust TRPL\n pp. 11-24  guessing_numberをやっていく。 SMLの勉強をやっていたおかげで、前回の時よりも何をやっているかがわかりやすくなったかも？ (もしかしてちゃんと印刷したからかもしれない)  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/27/20201027log/",
                "title": "20201027log",
                "section": "post",
                "date" : "2020.10.27",
                "body": "薬は偉大で、安定して活動できる。\ndiary 薬の効果かどうかわからないが、食欲も戻り、活動意欲も戻り、順調に活動できた。\n明日はブーメランデスクが届くのでそれが楽しみだ。\nwork 今日の仕事はオフィスの引っ越しに伴い、回線の設定をやっていた。使えるルーターがこんなに制限されているサービスがあるとは思わなかった。 おかげで、久しぶりに一万歩歩いた。\n設計について色々相談することができた。 これまでは、今やらないと死ぬから自分で実装する、という状況から、破滅を避けるために長期的にチームでどうやっていくか、という方向にシフトできるようになった。 これもまた、いわゆる「防御的」な仕事であるが、よい経験になると思うので非常に良い。 特に、これまで考えていなかった思考や思想に触れられるので、とても刺激的である。(独りでの仕事だとどうしても至らない事柄である。)\n面談 趣味はカジュアル面談です。\n今回相談したところでは、相手の文化や制度を聞きつつ、仕事内容を聞いて、そのうえで、自分の視点からより突っ込んだ質問をするということができるようになってきた。\nまぁ、私が思いつくような疑問点というのはおおよそ採用をやっている人やマネージメントをやっている人は考えていることなので、現在の状態と今後の方針を教えてくれるので、カジュアル面談をやるような会社さんはすごく計画的な採用をしているんだな、と実感した。 特に、事業およびプロダクト・プロジェクトの過去の経験から、事業の向上に繋がる課題の認識、どう解決していきたいか、というところまで見れる。 明確である分、聞きに行く人間としてはすごくよい体験を得られるし、相手にも私の興味や関心を伝えられ、自分だったらこういうことができるということが提案できる。\n私が毎回質問するのは、仕事をどう評価するか、事業として、プロジェクト・プロダクトとして、チームとして、が挙げられる。 それがしっかりしていないとチームもメンバーもやりがいが減るからであり、文化が衰退していくと感じるからである。\n現職から離れる予定はそうそうないが、自分のキャリアを考える上では非常によい参考になる。\n今日の勉強 rust TRPL\n pp. i-10  前の版で読んだのでそのまんまやっていく。   画面上だとどうしても読めないので、pdf版を印刷して読んでいる。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/26/20201026log/",
                "title": "20201 26log",
                "section": "post",
                "date" : "2020.10.26",
                "body": "虚無から脱出する方法を見つけられた。薬だ。\ndiary how to handle depression 虚無から抜けるためにやる気で解決するのはやはり駄目だった。\nノートを見返していたら、数ヶ月前も同じようなことが起きていた。その際は、ちょうどメンクリにいって、スルピリドをもらって、すぐ解決したことを記録していた。\nすぐ解決できたので薬がまだ残っていたので、飲みだした。布団から立ち上がれるようになった。 そして、ずっと残っていた洗濯物を畳み、掃除をし、一個一個生産的なことをするようにした。\n前回も同じように、少し飲んで、一個ずつ片付けていき、回復したのだった。\n鬱というのは、デフレスパイラルのようなもので、どこかで上昇に切り替えないといけない。 それのきっかけがお薬なのである。\nこれで一応私の先週木曜からの虚無感がやっと抜けられそうだ。 次回のメンクリでは、この件について相談して、再度出してもらおう。\nlog 今日やったことをリストアップするととても良い\n コーヒーを入れる 洗濯物を畳む 風呂掃除をする 便所掃除をする 不要な机を片付ける　→　だいぶ部屋が広くなった 窓を開けて掃除機をかける 詰まっていた排水管にパイプユニッシュを入れる SNUSが国際小包で届く 湿疹にイライラする。  今日の勉強 sml  問18.39  copyの実装を間違えていた箇所が見つかったので、それの修正を終えた。 修正を終えて、なんとかWebshの実装が完了した。   残っているのは、「18.14　プログラミング課題」であるが、これはFuture Work的な側面が強い。 発行から20年経った現状、SMLでのこれ以上の開発はそれほどやりがいを感じられない(やるとしたらSML#だろう)から、 また、Rustの勉強をやりたいと最近感じているからである。\nこれにて、とりあえず『Standard ML 入門』を一旦終えることができた。 いずれこれについて、何か記事をまとめることにしようと思う。\nTeam Geek 『Team Geek』の5章(pp. 121-146)を読む。\n気になったことと自分への振り返りのためのメモ書き。\n 約束を小さくし、届けるものを大きくしよう。  できないものに「No」と言う意味で約束を小さく プロダクトのローンチをするという意味で届けるものを大きく  許可を求めるより寛容を求める 道がないなら道を作る  置き換えるなどをして対処する 誰から聞いた言葉かは忘れたが、「壁にひざまずくのではなく、壁を打ち砕くのではなく、壁をすり抜けよう」という言葉を思い出した。  悪いマネージャーや社内政治家や悪い組織体制の存在に気付き、適切な対処を身に着けよう  幸いそういう悪いものとは遭遇していない だが、いずれ出会うかもしれないし、私がそれになるかもしれないので覚えておこう  チームメンバーとしての価値の向上をしよう  責任範囲を広げる リスクをとる(早い失敗をするため) 大人らしく振る舞う 質問をする マネージャーはエスパーではないことを覚え、積極的に連絡する。  「攻撃的」な仕事と「防御的」な仕事  政治的信頼性の獲得をしやすい攻撃的な仕事、UI改善や新規機能開発 防御的な仕事というのは生産性をあげるためのリファクタリングなどの負の遺産の整理である。 筆者らは、3分の1から2分の1までしかかけないようにしており、それ以上は政治的自殺行為であるから、と述べている。 私は4分の3以上が防御的な仕事なので、もう終わりだ。 なお、ここまで防御的な仕事になったのは、昨年外部と関わった仕事で、内部の攻撃的な仕事に関われなかったことがきっかけなのかもしれない。  運を味方につけるためには、気づくことが重要で、その気付きには、人の仕事を手伝うことが重要  それによって人のつながりが得られ、それは会社から抜けた後でも続く  ポジションを上げよう 強力な友達を見つけよう  管理とは仲良くなろうと思った  行動を要求するメールの書き方  最大3つの問題についての説明の箇条書き 1つだけの行動要請 HRTの原則に基づいたお願いや質問をすること 問題の詳細等については、お願いやメールの締めの後に、追加する。  自分自身の将来をコントロールできる能力を身につける。 "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/25/20201025log/",
                "title": "20201025log",
                "section": "post",
                "date" : "2020.10.25",
                "body": "虚無を終わらせたいが、これを終わらせる方法を私は知らない。\nずっとYouTubeで映画のあらすじや考察系の動画を見ていた。\n虚無から抜け出せない。\n脳みそが動かない。記憶が短期的すぎる。\n今日の勉強 sml 『Standard ML 入門』\n pp. 264-265 問18.37  HELP で表示させるエラーメッセージの一部を作成  問18.38  linkやfollowを使った場合に、Parseがうまくできていなかったことに気づいた。 printしまくって、なんとか原因の特定と対処をした。   問18.39のcopyの実行で、うまく実行できていないことがわかった。 次回はそれの修正をしよう。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/24/20201024log/",
                "title": "20201024log",
                "section": "post",
                "date" : "2020.10.24",
                "body": "虚無が続く\nゲーセンに行く。\n富士そばを食べる。\n勉強をする気が起きなかった。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/23/20201023log/",
                "title": "20201023log",
                "section": "post",
                "date" : "2020.10.23",
                "body": "他人に果たして魂や心があるのかという問題に悩み始めた。\ndiary 心と世界 これがひどくなると、相手の視点を思いやることができなくなる。つまり、自分の目から見えているものが相手には見えていると思ってしまう。道行く人とすれ違って、なんで前の人は後ろの人のことを見れないのかわからなくなる。\nまた、自分の心が、体そして世界とどうしてつながっているかもわからなくなる。\nアルコールが入っているときの、体における倦怠感とほどよいむくみは、この心が世界と繋がっている確証を与えてくれる。\n魂の冷え切り 魂が冷えると、チームメイトへの扱いがぞんざいになってしまうので、よろしくない。\n相手には魂がないと思ったり、相手にはこちらへの尊敬の念がないと思ってしまう。\nいや、そうではない、こちらも敬意を見せなければならない。\n社会とのつながり、社会や他者への貢献をしなければ、いずれ私はただ一人、自分の殻の中にこもった孤独な人になってしまうだろう。\nSonic Pi Sonic Piをインストールして、とりあえずサンプルのコードを流す。\nちょっといじって自分の好ましい音とリズムを見つけて、それで満足する。\n今日の勉強 sml 『Standard ML 入門』\n pp. 264-265 問18.35  環境変数の出力を可能にした。  問18.36  lynxを呼ぶところでエラーが吐き出された。原因の特定と修正をしなければならない。   go gormがいつのまにかv2を出してたのに今更気づいた。\nauto_incrementの処理で悩んで、table層とmodel層を綺麗に分けたいので、それの都合で、gormに埋め込み構造体を入れて、扱おうと思ったところで、悩ましくなった。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/22/20201022log/",
                "title": "20201022log",
                "section": "post",
                "date" : "2020.10.22",
                "body": "虚無\n虚無だった。 何も手がつかず、身体を布団から動かすことができなかった。\n本来の予定では、会社の合宿があったのだが、完全に私は寝坊して、二度寝をして、ぶっちをした。\n虚無である。\n今日の勉強 sml 『Standard ML 入門』\n pp. 263-264  topLoopの分岐の写経  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/21/20201021log/",
                "title": "20201021log",
                "section": "post",
                "date" : "2020.10.21",
                "body": "虚無\nチキンのトマト煮を作る\n自分の社会活動のすべてが虚無に思えてしまい、何もできずに時間をすごす\n今日の勉強 sml 『Standard ML 入門』\n 問18.33 問18.34  とりあえず型エラーが起きないものを書く 実際のコピー処理については、18.13節でやってみる  "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/20/20201020log/",
                "title": "log",
                "section": "post",
                "date" : "2020.10.20",
                "body": "季節の変わり目と身体の疲れと心労とによって、魂の冷え込みを感じる。\n季節の変わり目での体調の問題を感じる。心と体の連関は深く、体を意識してコントロールし、魂を十分に発揮させねばならない。 また、今日あえて意識的に振る舞ったことは、心の疲れを生む。 これらによって、魂のちからを十分に発揮できなかったような気がする。\n本質的に重要なのは、何をなすかではなく、どいういう人になるかである。\n効果的な証人であるためにはどうするか。 他者が私達の人生の中に何を見出すことを神が望んでおられるか。 それは神のご性格であり、それはイエスが模範を示している。 愛、喜び、平和、寛容、親切、善意、誠実、柔和、節制、これらを禁じる掟はない。 これらを実践することこそが、愛の実践であり、これこそが他者が私の抱いている希望について説明を要求する人にいつでも弁明できるように備えることになる。\n今日は、これらを意識して、振る舞うようにしていた。 できていたであろうか。 しかし、意識してそれをやることは時に疲れを生む。 あくまでも意識してやること、仕事としてやることは、境界線を引いて、思いやりの限度を持たねばならない。\n今日の勉強 sml 『Standard ML 入門』\n pp. 261-262  structure CopyUrlの補助関数以外のところを写経  問18.31  相対パスについての実装を終えた   cdk CDK deployでよくわからんことが起きたから、 cdk synthで、Cloud　Formationを出力させようとしたら、\n Object.fromEntries is not a function\n というエラーが発生した。npm audit fixしても、node_modulesを無限に消して再インストールしても、駄目だった。新しくlocalにrepositoryを立てたら直ったからヨシ！\n結局、CDKでよくわからないところはCloud Formationで調べたら何が足りていないかがすべてわかった。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/19/20201019log/",
                "title": "20201019log",
                "section": "post",
                "date" : "2020.10.19",
                "body": "今日は寝坊した。 そして、昨晩より続いていた気分の落ち込みが依然としてひどいことに気づいた。\n今日は寝坊をし、午前6時に起床した。 寝坊をするということは、なんらかの問題があることだ。\n季節の変わり目や、天気が悪い日は、特に気分が落ち込んでしまう。 ドーパミンやアドレナリンが足りないだけであり、私の魂は変わらないままであるはずだ。 そうであるはずなのに、気分は進まない。\nあと、ここ最近の聖書日課であるところのエレミヤ書の内容がすごい暗く、我々に破滅を預言している内容であることも関係しているかもしれない。 霊の火を消さず、預言を軽んじない、というのは今期の私の目標のうちの1つであるから、これに耳を傾けねばならない。\n聖なる生活を送り、穢のない心をもって歩もう。\n覚書 仕事で思ったこと 仕事について、バス係数を高めよう、と思った。\n水平にスケールしなければならない。 そうでなければいつまでも、私はベン・ハダドの谷から、抜け出すことができず、運命の場所にたどり着けない。 さらには、他者に貢献する機会を損なってしまうことに繋がるだろう。\nまた、私が今やっている仕事のバス係数を上げる他にも、同僚がやっている仕事のバス係数を上げよう。 それもまた、他者に仕えることである。 自分の仕事のバス係数を上げることとと、同僚の仕事のバス係数を上げることが一致する課題もあるだろう。それを探して、実施してみるのも良いことである。 (例えば、自分の問題意識を設計にして意見を聞くことは、設計を担当している人の仕事のバス係数を上げ、また私の仕事のバス係数を上げることになるであろう。)\n問いかけの向上 今日は少し、問題解決モードではなく、問いかけに意識を向けるようにした。\n良い試みであると思った。もっとよりよい問いかけを実施しよう。\n神のご計画の一部としての行動と愛とふるまい 運命の場所 運命の場所に至らねばならないという思いをいだき続けている。 そして、今の場所がベン・ハダドの谷ではないかという疑いも抱いている。\nもし今の場所が煉獄であり、そして、運命の場所に至るためには、進んで離れなければならないときが私にはいずれ来るであろう。 いつでも備えていなければならない。夜に新郎新婦が祝いの席に来るかもしれないのであり、そのためには灯火を用意し、寝ていてはならないからである。\n運命の場所に至るために、私は生まれ、そのことは、神のご計画の中にいる。\n灯火は燭台の上に 神のご計画の一部として、愛を持って行動することが含まれている。神は前もって準備してくださった善い業のために、キリスト・イエスにおいて作られたのであるから。\n愛を持って行動することは、先日から述べている通りであるが、この愛を持った行動は、自分の愛だけではなく、私達を通して神の愛を表明することでもある。 効果的な証人にならねばならない。 これが、世の光となる。\n今日の勉強 sml 『Standard ML 入門』\n pp. 261 問18.31  絶対パスについての実装を終えた 相対パスについての実装をしなければならないことに、通勤途中で気づいた。   冒頭で述べたとおり、朝起きれず、それほど時間を取れなかったことを後悔している。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/18/20201018log/",
                "title": "log",
                "section": "post",
                "date" : "2020.10.18",
                "body": "PCを買うよりも新しい机を買おうと思い直した。\nPCを新調しようと定期的に思いついてしまうが、いや、結局今のマシンでも十分であるし、その金で机を新しくしたほうがいいと思い直した。 (つよつよPCを作るくらいなら、AWSでremote 開発環境を作った方が安く済む。また、PCの資産としての価値は低いから。)\n現在の机はIKEAのもので、だいぶぼろぼろになっている。また、机の広さも足りなさを感じている。\ndiary 午前中。\nチキンのトマト煮を作った。 間違えてカットトマトではなくホールトマト缶を買っていたことに気づいたが、うまく作れた。\nFEBCで日曜礼拝を聞く。\n午後は頭痛がひどくて、そして虚無が襲い掛かってきた。何にも手がつかなくなった。\n感情をコントロールするためには、体を動かす必要があるが、その気持ちすらわかない場合にどうすればいいのだろうか。\n愛の実現のために 信仰は望んでいる事柄を確信し、見えない事実を確認すること。つまり、神の存在や神の愛を確認できる。\n行いが伴わないなら、信仰はそれだけでは死んだもの。信仰という心から神へ愛を伝えるチャネルを成長させるためには、行い・活動が必要である。信仰が愛を導き、行動がその愛の実現を導く。 御言葉を読み、神が私達の魂に入り込む様を見、祈るという行動こそが、神様に愛を本物で成熟したものへと涵養する。\n私達が神を愛するのは、神がまず私達を愛してくださったから。神からの愛は、信仰や行動による報酬ではない。\n私は他人とその心や魂の存在を疑っている。だから、他人を愛することへの確信がない。だから、信仰を持ち、行動をし、神を通して、その存在に確信を持ち、愛を実現させる。\n今日の勉強 sml 『Standard ML 入門』\n pp. 259 - 261  筆者が、なにをやるか、どうやるかを明示してくれているので、読者の自分は、自分が有能なのではと勘違いしてしまっているところがある。  問18.30  CopyDirStreamの以前の実装があるので、リストアップはできそう。 実装する方針は立てた。   isabelle Concrete Semantics\n Exercise 9.7をとき直そうと思い立つ  WhileTrueのケースの証明ができなくて詰まっていた 先人の回答をカンニングした。 条件を間違えていたことに気づいた。 erase_correctを終えたが、ほか2つの性質については示していない。  Sec_Typingの言わんとしていることを理解していないことがわかったので、次回以降はまた10章に戻る。  カンニングしてわかったこととして、以下の書き方がある。\nproof (csses) assume \u0026quot;A\u0026quot; ... next assume \u0026quot;\\not A\u0026quot; ... qed  と同じことは\nproof (csses \u0026quot;A\u0026quot;) case True ... next case False ... qed  というのが使えることがわかった。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/17/20201017log/",
                "title": "20201017log",
                "section": "post",
                "date" : "2020.10.17",
                "body": "勤勉であるためには休息が必要である。\n勤勉であるためには、週のうち1日を休息に割り当てることが必要であると覚え(神様だって世界創造の後に1日何もしない日を設けた)、 毎週土曜日は休息の日としている。\ndiary 今日は料理もせず、服も畳まず、また、時間通りに動くことを意識せず、自分の意志の思うままに動いた。\n遊ぶのではなく、休む。この時間の流れに身を置いた。\n人間関係での覚え 最近は『Team Geek』を読んでいたり、また今後の人生について考えたりして、人との関係についてよく考える。\n人との関係は神との関係の延長である。\nまず第一に主を愛し、そして隣人を愛する。神と人との関係は垂直的な関係性であり、人間同士の関係は平行的な関係である。\nそして、神との関係、人との関係で重要なのは、共有される愛と情愛、そして、その愛を実行に移すことである。これらの根本的要素がないと関係性は成功しない。\n隣人に対して、共有されている愛や情愛を、実行に移すことこそ、神の御心に触れることである。\n主を愛し、兄弟姉妹である隣人に、その愛を実行しよう。\n今日の勉強 sml 『Standard ML 入門』\n p. 259  問18.29は現在のSMLが日本語文字をUNI-8に変換してくれているので飛ばした。  問18.28  ダブルクオーテーションとシングルクオーテーションの両方に対応する 型があるおかげで、修正範囲が明確になって、かつ簡単に解くことができた。   isabelle Concrete Semantics\n p.151 lemma \u0026ldquo;D_mono\u0026rdquo; と theorem \u0026ldquo;D_presevation\u0026rdquo; の証明。  証明を追いかけることはできた。   team 『Team Geek』 pp.99-117 (4章)\n チーム文化に含めないことについての話 チーム文化について  私はチーム文化を作ったことがなく、また、ある文化に属しているという自覚もない。 それならば、せめて有害な振る舞いを私がしていないか振り返り、そしてHRTの原則に従って礼儀正しく振舞おう。(礼儀正しさと冗長さのバランスはどう取る？という疑問はある)  チームの脅威の種類。主に、注意と集中のリスク。  他人の時間の尊重。私はもはやslackですら、それほど通知を出したくない。(もしそれが必要であるならば、それは仕組みやチームの文化を見直した方がいいと感じたからだ) 異なる視点の受入や妥協をすること。 また、チームの脅威という点では、自分のスクリーンネームが曖昧であることが気になった。  有害な振る舞いを文化から追放する方法(追放するのは人ではない)  完璧主義には方向性を与える。 トロルに餌を与えない。 感情的にならない(感情的になったことが何度かあるから、ファクトベースでとらえ、悪意ではなく無知を見出そう) プロジェクトの長期的な視点でのメリットや、衝突は有益な方法で解決できるかを、考える。(期間や有益さはチームの文化にとってどうかである)  無能(無知)で十分説明されることに悪意を見出すなというハンロンの剃刀を覚えておこう。  話の中で、興味深かったのは、高い技術力よりもその人のチームとの協調性とを有線する場合があることである。 その人がチームの文化と一致しない場合や、さらには有害である場合は、その人やその人の意見は追い出される。 なぜなら、技術がある人は替えが効きやすく、しかし、その文化に馴染む人は希少性が高いから。 そして、彼らの重視している文化、謙虚、尊敬、信頼というのが、全体の効率性を上げ、また、プロダクトの向上に繋がるからである。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/16/20201016log/",
                "title": "log",
                "section": "post",
                "date" : "2020.10.16",
                "body": "朝が寒すぎて、出社時の検温で、35度6分となってた。\n肌の表面温度が35度になっていただけである。そこから徐々に肌に熱が戻ってくるわけであるが、その過程でスーツが十分熱く感じるようになってしまった。\nさて、これからはもっと寒い季節になる。乾燥がひどくなると、風邪予防のためにはマスクが必須になるかと思う。\nマスクを付けるとじまんの口ひげがかくれてしまうので、残念なところはあるが、感染症予防のためにも、引き続きマスクが必要だ。\nまた、ビタミンＣはよく取らねばず、そして、アルコール接種は体調を崩しやすくする。だから、今日もレモンサワーの代わりにレモン炭酸水を飲んだ。(レモンサワーを作るために買ったJINROを消費できないのは残念であるが。)\ndiary 思考の激しさは舌に影響を及ぼす 午前中は思考が散らばっており、ツイートで多くをつぶやいた。\nツイートする内容が多いということは、思考が散らかっていることだと、自己を反省し、落ち着くために、お昼寝をした。\n昼寝によって、午後は思考がだいぶ安定するようになったと思う。\n舌（ツイート）は小さな器官であるが山火事を起こすものである。これをコントロールすることが重要である。\n黄金律 自分が行ってもらいたいことを他人にも行う、という黄金律がある。これはキリストの教えた中での優先事項の1つである。\nまた、Team Geekに記載があったが、すぐ問題解決モードに移行するのではなく、質問をするようにする、というプラクティスもある。\n今日は少しであるが、こうすればいい、と聞くのではなく、「その課題の命名ってあれに近いよね」とか「その課題って、私たちの日常で時々やっているものないかな」とか、言葉を変えて、質問するようにしてみた。 実際、私はこういう問いかけをしてもらいたい。 聞くには早く、語るに遅く、また怒るに遅く、というのは美徳の一つであろう。\nだから、もしかしたら、今日の振る舞いは黄金律に即し、かつ、よいチームメイトとして振舞えたのではないか、と思っている。\n今日の勉強 sml 『Standard ML 入門』\n pp. 258-259 問18.26  型の不一致については、テキストの記述に誤りがあった。 val nextRef : Types.url -\u0026gt; Types.source -\u0026gt; Types.url optionとあるが、Typesにはsourceの定義がされていないので、Lex.sourceとしなければならない。  問18.27  一応parseHtmlの実装はできた。 しかし、HTTPSに対応していないので、うまいことparseしてくれないというISSUEはある。 問題文を解くうえでは、本質的ではないので飛ばしてもよいだろうが、気持ちの問題として、実際にwebshを動かす際には対応したほうがいいだろう。   otp 会社で業務時間のうち、勉強する時間を設けてもよいことになっており、それでアプリを作っているわけだが、今日は二段階認証について勉強していた。\n二段階であればなんでもよいわけであり、メールにコードを飛ばすのでもよいわけである。 が、普段使っている二段階認証であるところのGoogle Authenticatorなどでどうやっているのか気になったので調べた(cf: ISSUE )。\n TOTPはHOTPを使っていること、  ここでの計算では、OTPの有効期間のdurationを設定している。 中間者による攻撃は未然には防げないから、この辺りは注意しないといけない。  HOTPは秘密鍵など任意のバイト列を共有し、それをシード値として用いて、サーバー側とクライアント側で同じOneTimePasswordを生成できるようにしていること  かなり単純なアルゴリズムである。  TOTPはHOTPのcount部分を時間を用いているので、サーバー側とクライアント側との間にある時間のズレについては多少許容される  実際、Google Authenticatorを使っていたら、表示されなくなった直後1秒か2秒くらいだったら時々通ることがあるのはこれであろう。   ここまで調べて、実際に勉強としてやるのは面倒なので、TOTPは使わないにせよ、TOTPで問題となっている一部について考慮して実装をしようと思う。\n(あと、そろそろ適当にService層に関数を追加しているので、ちゃんとServiceをもうちょっとわけて整理したい。全部必要だから突っ込んだれ、という感じはやめよう。) (ただ、この整理については、別のPRやISSUEの責務なので、二段階認証の実装が済んだらそれでやろうと思う。)\ngolang の map golangのmapをほとんど使っていなくて、え、どうするんだっけ、となり、自分の無知を晒しながら、ペアプロをした。\n適切なコメントをもらいつつ行えたので、本当に助かった。ナビゲーターには感謝の言葉を伝えた。\n感謝を伝えることは本当に気持ちの良いことである。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/15/20201015log/",
                "title": "log",
                "section": "post",
                "date" : "2020.10.15",
                "body": "自分が本当に挑戦しているのか、わからない。(対アルコール)\n酒を連日飲むと、手に湿疹が出るからお酒を控えようと思いつつ、飲んでしまう日が多い。 控えることができない時というは、喉に乾きを覚えていたり、また疲れてアドレナリンを欲しているときであったりする。 (レモン炭酸水はごまかす為に丁度良いことは先日述べた通りである。)\nどうもアルコールについて挑戦していないように思える。それは、どうしようもならない問題について神に助けを求めていないという程度においてである。\n同様に、果たして、勉強において、仕事において、どうしようもならない問題に挑戦しているだろうか。\n私は全てを予測可能に、コントロールできる範囲にして、不明瞭なことやできないことを排除している。(時間通りに動き、日課をこなすことは、自分についてコントロールすることであり、これはかなりの程度効果がある。)\n挑戦していないわけではないが、どちらかというと、素早い失敗をしていないのではないだろうか？(もしくは、素早く失敗しすぎて、失敗に気づいていないのか？)\nまずはアルコールについて挑戦をし、どうすればいいかについて、神に助けを求める他ない実感を抱かねばならない。悔い改め、神のもとに立ち返るような。\n今日の勉強 sml 『Standard ML 入門』\n p. 255 pp. 257-258 問18.26 のnextRefの実装の一部を書く。  TextIOからExternalIOに変えることになったので、型が不一致しているので、それの修正をしなければならない。   cdk AWSのサービス構成の絵を描いて、それに従って、CDKに書いていく。CDKの書き方については、公式のドキュメントが丁寧であり、それに従いギャップを埋めていった。\nバージョンによって、だいぶ推奨される関数に変化があったりするので、望ましいものを書くためには、手心がいる感じだ。\nCDKについては、まだ私は挑戦をしていないと思う。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/14/20201014log/",
                "title": "20201014log",
                "section": "post",
                "date" : "2020.10.14",
                "body": "レモンサワーよりもレモン果汁が好きである。\n昨晩ブログを投稿してから、酒を飲もうか悩んでいたところ、割り材のハイサワーレモンをそのまま飲んだ。 そして、改めて気づいたのだが、レモンサワーのアルコールよりも、レモンの炭酸水が好きであることだ。\n酒を飲んで、身に覚えのある失敗をしたことは山ほどあるのだから。\nlog SML 『Standard ML入門』 pp. 252-255\n 問18.20  CM.makeの問題を解決  URLに対する入出力処理に関して  テキストに書いてあるコードを写経 lynxをinstallしておいた 問18.21と問18.22の解答を作成   Isabelle \u0026ldquo;Concrete Semantis\u0026rdquo; pp.149-151\nDef_Init_Smallを読んでいる\n 定理だけコピペして、テキストを読みながら、そこから証明を構成することをやろうとしている。 一部、sledgehammerでは生成されない証明があることについて、彼らはどうやって解いているのだろうか。  自らのひらめきだろうか？   Team 『Team Geek』 pp.63-95 (3章)\n 自らがアンチパターンに陥っていないかと、普段の自分を客観視できていないことへの不安  人間の問題を無視していないか 自分自身がパフォーマンスの低い人ではないか 仕事において友達として同僚に接していないか、線引きをうまくできていないか  人にお願いしたり相談を受けたりしているときに、よいチームメイトであるだろうか  エゴがないだろうか。 相談を受けて、すぐ問題解決モードに突入しがちで、相手を誘導するためのうまい質問をできているだろうか。 誉め言葉のサンドイッチを使っていないだろうか？　難しいフィードバックを適切に伝えられていないのではないだろうか？   diary Goalについて 運命の場所にたどり着かねばならない。 そのためには、自分のなりたい像のクリアなビジョンを抱かねばならない。 しかし、私には、そんなビジョンが全くなく、一方で、やりたいことばかりがある。\n時間は有限である。 やりたいことからやることを選択するためには、自分のなりたい像のクリアなビジョンがなければそれができない。 そして、それをしなければ、何もしなかった人間しか残らない。\n私は一体何者になりたいのか。どういう人になりたいのか。\nこの問をずっと繰り返している。\nWSL WSL2のおかげで、Windowsは比較的良い開発環境であると思う。\nApple製品を選択する理由が、Appleのデザインと固定資産としての期待値以外なくなりつつある。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/14/what-i-failed-to-use-cm/",
                "title": "What I Failed to Use CM",
                "section": "post",
                "date" : "2020.10.14",
                "body": "昨日、CM.make が失敗するというISSUEを建てたが、それの原因がわかった。\n発生していた問題は、分割コンパイルしているところで、StandardMLのBasis Libraryがautoloadされておらず、unbound structure: X in path ...というエラーメッセージが表示され、コンパイルができなかったことである。\n原因と対処方法 SMLのライブラリはかなり破壊的な変更が加えられているので、『Standard ML入門』が書かれていた時期とはライブラリーの基本的な関数の引数やその型が変わっていることが多く見受けられる。\nそこで、CMの新しいライブラリのpdfを読んで、そこに含まれるサンプルコードを見れば、以下のような記述がある。\nGroup is xxx.sml yyy.sml $/basis.cm  上記の通りに設定すれあ、分割コンパイルは成功した。\n残っている疑問点 なお、CM.Library.known()で出力されるリストにはbasis.cmが含まれているし、失敗するところでのautoloadにも表示されているが、なぜかは不明。\n教訓 公式ドキュメントを読もう。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/13/20201013log/",
                "title": "20201013log",
                "section": "post",
                "date" : "2020.10.13",
                "body": "汚い言葉ではなく、感謝の言葉を。舌は山火事のもとである。\n舌を制御する 心は身体に左右される。また、舌は人体においては小さな器官であるが、自分の心のみならず、他人の心を巻き込み、まるで山火事を起こすようなものである。\nだから、自分の発する言葉には最新の注意を払い、清い言葉を口に出そう。聞くに早く、語るに遅く、また怒るに遅くあろう。\n私の口癖は「くそ」だったり「死にたい」だったりする。これらの汚い言葉を発する原因を考え、今一度、綺麗な言葉、また感謝の言葉に治そう。\n今日起きたことは、自分の無力さや無知を感じたとき、心が落ち込んだら、「死にたい」と感じたら、それに気づかせてくれた人や事柄に感謝しよう。\nAWS CDK 今日はCDKであれこれしようとして、色々とどれをしたらいいのだろうかわからなくなった。\nその際に、ペアプロで、適切な助言をいただき、それにより、自分がAWSのサービスについて詳しくないことに気づいた。\n私はこのとき、自分の無知さによって、「死にたい」という言葉から口から出そうになった。また、それに類似した言葉を出した。\nしかし、改めて、それをSlackにおいてその「死にたい」という言葉が出るようなきっかけを気づかせてくれたことに、感謝を伝えた。\n帰宅してからも、自分の無力感に襲われていた。しかし、改めて、その感情に向き合い、改めて、そのことに気づかせてくれたペアプロの時間、そしてコメントをくれた人に感謝の気持ちを抱いた。 主よ、感謝します。どうか、聖なる生活を送らせてください。\nやりたいと気づいたこと AWSのサービスについてある程度の認識を持ちたい(「必要である」や、「やらねばならない」というのはできれば言葉にするのは避けたい。それは災いを招くから。)。\n ALB, target-group, ECS, container, これらの連関、そしてそれらをどう設定しているから実現されているのか、 また、これまでGUIでなんとなくできていたが、これをCDKのレベルで実現するにはどうするか  具体的には、CDKでどう書いたら、これまで触っていたGUIと同等のことができるのか、の一つ一つの対応関係について   今日の勉強 sml 『Standard ML 入門』のpp.251-252、18.9節「分割コンパイル」の箇所。\n問18.20の分割コンパイルのところで、よくわらからないエラーに遭遇した。本書が書かれた20年前とはだいぶライブラリーも事情も変わっているので、自分で調べて自分で直さなければならない。\nISSUEはこちら。\n公式のCMのドキュメントを読みつつ直していこう。\n"
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/12/what-i-learned-from-using-hugo/",
                "title": "What I Learned from Using Hugo",
                "section": "post",
                "date" : "2020.10.12",
                "body": "Hugoをローカルに入れたくなくて、docker imageを使うことにしたが、それを使って行く中で気づいた、私の知らなかったことリスト。\nわかったこと わかっていなかったことが複数見つかった。\n Dockerとdocker-composeのことがよくわかっていない。  docker-compose で、複数の設定をどう使うか、知らなかった。 -f 指定はbuildに対しては利用できないとか。 image名の重複が発生したときのエラーがどういうものか、などを知らなかった。  git のことをよくわかってない  submoduleがどういうものかわかっていなかった。-\u0026gt; なんとなく使い方はわかった。 staged changeをgitがどう管理されているかわかっていない。 素朴にaddしたりcommitしたりしているが、どうgitがそれを管理しているのかよくわからない。   今後やりたいこと  CIで自動デプロイさせたい。 "
            }
        
    ,
        
            {
                "ref": "https://2222-42.github.io/2020/10/11/first-post/",
                "title": "First Post",
                "section": "post",
                "date" : "2020.10.11",
                "body": "これは私の投稿です。\nwho 九鹿四十二だったり、ルグランだったり、大王だったりする人間のweblogです。\nwhat このweblogで記録すること：\n 日々の勉強のログ(e.g., 『Standard ML 入門』の読書状況)  および、その整理とアウトプット  考えていることの整理  現在やっていること やっていること:\n プログラミング  Ruby Standard ML Golang  形式手法  TLA+ 並行して分散合意アルゴリズムに関して学習中 Isabelle  チーム  よいチームメイトとして振舞えるようになるため。   Appendix 使用したツール このブログを構築するのに使ったのは以下の通りである。\n Docker Hugo "
            }
        
    
]